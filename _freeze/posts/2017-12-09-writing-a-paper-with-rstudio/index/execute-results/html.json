{
  "hash": "eb1c52e321e90ac42620f87918490a25",
  "result": {
    "markdown": "---\ntitle: Writing a paper with RStudio\nauthor: Davis Vaughan\ndate: '2017-12-09'\n---\n\n### Intro\n\nThis semester I had to write a paper for my Financial Econometrics class.\nMy topic was on analyzing the volatility of Bitcoin using GARCH modeling.\nI'm not particularly interested in Bitcoin, but with all the recent news around it, and with its highly volatile characteristics, I figured it would be a good candidate for analysis.\n\nI did the analysis in R, but I wanted to take it a step further.\nCould I write the entire paper in R and RStudio in a fairly professional format?\nYes.\n\n![](./img/paper-sample.png)\n\nI figured I would outline a few issues I had along the way, and talk about the experience for anyone that might do something similar.\n\n### Github\n\nIf you want to go view the entire paper and analysis, it's on Github.\nCheck out the repo [here](https://github.com/DavisVaughan/fin-econ-project-bitcoin).\nThe PDF paper itself is buried [here](https://github.com/DavisVaughan/fin-econ-project-bitcoin/blob/master/paper/Forecasting%20daily%20Bitcoin%20volatility%20using%20Garch%20models%20with%20intraday%20data/Forecasting_daily_Bitcoin_volatility_using_Garch_models_with_intraday_data.pdf).\n\nIf you really want to follow the analysis steps, look in `R/` to see the code that generates everything else.\nDo note that I had to keep the raw data zipped to get it on Github, so to run the data cleaning script, you will have to unzip the file in `data/raw/`.\nThe paper is written in `paper/`.\n\n### Tooling\n\nTo even begin thinking about this, I needed two R packages.\nOne that allowed me to write the post in RMarkdown and render it into a journal style format, and one that created nice looking and customizable tables.\n\nFor the first, I initially looked into the [`rticles`](https://cran.r-project.org/web/packages/rticles/index.html) package from the RStudio team, which is amazing, but I wasn't satisfied with the journal styles that they had as options.\nI then remembered that Dirk Eddelbuettel and James Balamuta had created [`pinp`](https://cran.r-project.org/web/packages/pinp/index.html), or, Pinp Is Not PNAS, as an extension of `rticles` and in particular the PNAS journal format.\nThis one fit the bill for me, as it provided an uncluttered journal layout with a bit of nice coloring as well.\n\nFor the second, there are plenty of options out there for creating LaTeX tables in R, `xtable`, `stargazer`, etc.\nHowever, I recently had found [`huxtable`](https://hughjonesd.github.io/huxtable/) and was instantly drawn to its intuitive pipeable syntax for creating tables from data frames.\nNow that I have a good bit of experience with it, I can say for certain that it is incredibly flexible, and I doubt I'll ever use another package for table creation.\n\nI was initially pretty worried about how well the two would play together.\nSure enough, after rendering a table or two I got errors that (for a non LaTeX expert) seemed faily cryptic.\nHowever, it turned out to be a LaTeX package (not R package) dependency problem where `huxtable` needed packages that `pinp` didn't use by default.\nThat was easily fixed by adding the following to the top of the YAML header provided by `pinp`:\n\n    header-includes:\n       - \\usepackage{tabularx,colortbl,multirow,hhline,mathtools}\n\nI'll also add in there that I used the `rugarch` package for all of my GARCH modeling, and it exceeded my expectations.\nIts author Alexios has created a fantastic S4 class system that makes trying different versions of GARCH models dead simple.\n\n### Huxtable\n\nI really wish `huxtable` had more publicity.\nIt is a highly underused package for everything that it can do.\nFor example, the following table was created using `huxtable`.\nNotice the math symbols in the first column, the fact that the standard errors are closer to the row above them due to smaller margins, and the bolding of certain cells.\n\n![](./img/huxtable-example.png)\n\nThe `tibble` used to create the core table looked like this:\n\n::: {.cell}\n\n```\n#> # A tibble: 14 Ã— 4\n#>    metric                   `5-Min`    Daily `5-Min No Outlier`\n#>    <chr>                      <dbl>    <dbl>              <dbl>\n#>  1 MAPE                    0.0278   0.0372             0.0249  \n#>  2 RMSE                    0.00407  0.00285            0.00244 \n#>  3 MZ Intercept            0.00226  0.00167            0.00127 \n#>  4 MZ Intercept Std. Error 0.000271 0.000486           0.000314\n#>  5 MZ Slope                0.282    0.441              0.798   \n#>  6 MZ Slope Std. Error     0.0540   0.144              0.113   \n#>  7 MZ $R^2$                0.200    0.0792             0.316   \n#>  8 MAPE                    0.281    0.325              0.279   \n#>  9 RMSE                    0.00788  0.00711            0.00700 \n#> 10 MZ Intercept            0.00250  0.00232            0.00164 \n#> 11 MZ Intercept Std. Error 0.000756 0.00127            0.000963\n#> 12 MZ Slope                0.161    0.196              0.607   \n#> 13 MZ Slope Std. Error     0.151    0.376              0.347   \n#> 14 MZ $R^2$                0.0104   0.00249            0.0275\n```\n:::\n\nAnd the R code to generate the table looked like:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(huxtable)\n\ntriple_blank <- function() {\n  c(\"\", \"\", \"\")\n}\n\nht <- hux_data %>%\n  huxtable() %>%\n  \n  # Column names\n  add_colnames() %>%\n  \n  # Proxy rows\n  insert_row(\"Proxy: RV\",    triple_blank(), after = 1) %>%\n  insert_row(\"Proxy: $r^2$\", triple_blank(), after = 9) %>%\n  \n  # Number rounding\n  set_number_format(everywhere, everywhere, \"%5.4f\") %>%\n  \n  # Bold\n  set_bold(matrix(c(2,10)), 1, TRUE) %>%\n  set_bold(1, everywhere, TRUE) %>%\n  \n  # Alignment\n  set_align(everywhere, everywhere, 'center') %>%\n  set_align(everywhere, 1, 'right') %>%\n  \n  # Padding\n  set_all_padding(value = 10) %>%\n  set_top_padding(c(6, 8, 14, 16), everywhere, 0) %>%\n  set_bottom_padding(c(5, 7, 13, 15), everywhere, 0) %>%\n  set_left_padding(everywhere, 1, -40) %>%\n\n  # Borders\n  set_bottom_border(matrix(c(1, 9)), everywhere, value = .3) %>%\n  set_right_border(everywhere, 1, .3) %>%\n  \n  # Escape latex\n  set_escape_contents(everywhere, 1, FALSE) %>%\n  set_escape_contents(1, everywhere, FALSE) %>%\n  \n  set_caption(\"Out of sample performance of GARCH(1,1) Normal models. MAPE for 5-min is lower than for daily. Across the board, using RV as a proxy over $r^2$ gives more accurate results. Removing the 1 extreme forecast from the 5-min method results in a much higher MZ $R^2$, and a MZ slope much closer to 1.\") \n\nht[1,1] <- \"\"\n\nht\n```\n:::\n\nYou even get to view your table in the console without knitting the document to check that you put lines / bolding / even coloring in the right place.\nThis saves more time than you might think!\n\n![](./img/huxtable-console.png){fig-align=\"center\"}\n\n<br></br>\n\nI find the pipeable syntax very intuitive, and the family of `set_*()` functions allow for endless combinations.\nI didn't even venture into the world of conditional cell formatting, but I hear that that is pretty powerful too.\n\n### Adding images\n\nI had created a script in my analysis that generated a number of graphics that I wanted to include in the paper.\nThe `pinp` vignette is an excellent source of examples for these common use cases, and the following allowed me to embed my images in the paper and add a caption with minimal effort:\n\n    \\begin{figure*}\n      \\begin{center}\n        \\includegraphics[width=1.00\\textwidth, height=8.5in]{../../visualizations/returns} \n      \\end{center}\n      \\caption{Descriptive plots of 5-minute and daily returns}\\label{fig}\n    \\end{figure*}\n\nNotice the relative path `../../visualizations/returns` where I backtrack up two levels from the location of the RMarkdown paper document and then into my visualizations folder.\nMy file structure looked a bit like this:\n\n    fin-econ-project/\n\n      - fin-econ-project.Rproj\n      \n      - visualizations/\n        - returns.png\n        \n      - paper/\n        - forecasting-volatility/\n            - forecasting-volatility.Rmd\n\nIdeally, I would have set my directory to be the RStudio Project directory so I could have just done `visualizations/returns`, but `pinp` and `rticles` both dump a large number of files into whatever directory you render it from, and I didn't want that cluttering things up.\nPerhaps specifying the location of that file dump can be a separate feature?\n\n### Adding equations\n\nAdding mathematical equations can be done in two main ways.\n\nAs usual, you can add inline math with the use of a dollar sign, then the equation, then end with a dollar sign, it ends up looking like this: $x + y = z$.\nMake sure that you *don't* leave a space between the dollar signs and the equation, otherwise it doesn't render and you end up with: \\$ x + y = z \\$.\n\nLarger chunks of equations that need their own lines can be specified using two dollar signs on each side:\n\n    $$ \n    r_{t_i}         = \\epsilon_{t_i} \\\\\n    \\epsilon_{t_i}  = \\sigma_{t_i}  z_{t_i} \\\\\n    \\sigma_{t_i}    = \\alpha \\epsilon_{t_{i-1}}  + \\beta \\sigma_{t_{i-1}}\n    $$\n\n$$ \nr_{t_i}         = \\epsilon_{t_i} \\\\\n\\epsilon_{t_i}  = \\sigma_{t_i}  z_{t_i} \\\\\n\\sigma_{t_i}    = \\alpha \\epsilon_{t_{i-1}}  + \\beta \\sigma_{t_{i-1}}\n$$\n\nUnfortunately, this doesn't align the equations at the equal sign, and I think that that looks pretty nice.\nTo do this, you can add `&=` instead of just `=` along with adding `\\begin{aligned}` and `\\end{aligned}` before and after the equation.\n\n    $$\n    \\begin{aligned}\n      r_{t_i}         &= \\epsilon_{t_i} \\\\\n      \\epsilon_{t_i}  &= \\sigma_{t_i}  z_{t_i} \\\\\n      \\sigma_{t_i}    &= \\alpha \\epsilon_{t_{i-1}}  + \\beta \\sigma_{t_{i-1}}\n    \\end{aligned}\n    $$\n\nto get:\n\n$$\n\\begin{aligned}\n  r_{t_i}         &= \\epsilon_{t_i} \\\\\n  \\epsilon_{t_i}  &= \\sigma_{t_i}  z_{t_i} \\\\\n  \\sigma_{t_i}    &= \\alpha \\epsilon_{t_{i-1}}  + \\beta \\sigma_{t_{i-1}}\n\\end{aligned}\n$$\n\nNice!\n\n### Overall\n\nFor the most part, I enjoyed writing the paper straight from RStudio.\nOnce I figured out a few of the pain points with directory locations, images, equations, and dependencies, the process was pretty smooth.\nThe only other comment I have is that the `pinp` Knit process is a bit slow.\nI doubt this has too much to do with the implementation, but more with the underlying rendering engines.\nI wish there was some way to have Live Rendering like with `blogdown` so that I could just keep a rendered version of the paper up and have it reload every time I save.\nThat would be the dream!\n\n### Update\n\nThanks to Dirk, [the dream has come true](https://twitter.com/eddelbuettel/status/939607571673075712?s=20&t=lQDzDBBjklmF7zeDl78FCA).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}