{
  "hash": "3909f31cbbe0c08a06ee2b4f3907866f",
  "result": {
    "markdown": "---\ntitle: RStudio and Shiny Servers with AWS - Part 1\nauthor: Davis Vaughan\ndate: '2017-05-15'\n---\n\n\n\nAfter realizing how fast I can burn through my free 25 hours on shinyapps.io, I decided to repurpose my RStudio Server to also work with Shiny Server.\nHere's my new setup:\n\n-   1 AWS EC2 server with an elastic IP address\n-   1 Route 55 Amazon domain linked to the EC2 elastic IP (davisvaughan.com)\n-   RStudio Server\n-   Shiny Server\n\nIn case I ever have to go through this madness again, or if anyone else wants to, I've compiled some step by step notes on the setup.\nIt's definitely worth it, though, so that you can have your own RStudio and Shiny servers!\n\n(I know that some others have already done posts like this, but I went into even more laborious detail on some of the basics.)\n\nIn this post, I will walk you through getting up and running with an RStudio server.\nIn the next post, you'll learn to get Shiny server working.\n\n## Step 1: Setup an AWS Account\n\nAmazon is nice enough to provide 1 year's worth of access to their [Free Tier](https://aws.amazon.com/free/) for AWS.\nThere are a huge number of options available, but the important one is that they provide a free 750 hours/month to deploy an EC2 instance.\nThat's just enough to keep 1 EC2 instance active 24/7, since 24 hours x 31 days = 744.\n\nIf you aren't familiar with EC2, think of it as your own personal always-on Linux computer that you can connect to through SSH, and access through the web by using an IP address.\nOne step further and you can access it through a custom domain name.\n\nCreate your free AWS account, and come back when you've finished.\nYou should be able to click on the giant sign in button, and sign in to your console.\n\n![](./img/sign-in.png)\n\nIf all goes well, you'll be at the console.\n\n![](./img/console.png)\n\nWe won't do anything else yet, just stay signed in.\n\n## Step 2: Setup the RStudio Amazon Machine Image\n\nIt's worth it to get familiar with setting up your own EC2 server, but we won't have to do that here.\nLuckily, Louis Aslett has created an Amazon Machine Image (AMI) to take care of all of the hard work for us.\nIt's basically some preconfigured settings that at the time of writing install the following:\n\n-   RStudio Server 0.99.903\n-   R 3.3.1\n-   Shiny Server\n-   Julia 0.4.6\n-   Python 3.5.2\n-   Git\n\nYou can find the link to the image [here](http://www.louisaslett.com/RStudio_AMI/).\nClick one of the links on the right to start the setup, I normally click the one closest to me regionally.\n\nThe Virginia link takes me here:\n\n![](./img/aws-rstudio-link.png)\n\nYou can click through the settings, but to just get setup, click \"Review and Launch.\" It will let you review one last time, and will likely warn you about security, we will change all that later, just click \"Launch.\"\n\n*Important!* Amazon will pop up a message box that talks about a *key pair*.\nThis is how you will SSH into your server later on.\nThis is really important, as you only get this screen one time, and can never come back to it.\nSetup a new key pair name (it can be anything), and click \"Download Key Pair.\"\n\n![](./img/key-pair.png)\n\nStore the .pem key pair file somewhere on your local computer.\nThis should be a secure location, but somewhere you can remember the file path to.\nThen click Launch Instances.\n\nAt the top of the next screen, click Services, and then select EC2.\nThis will take you to the EC2 Dashboard.\nYou should see that you have \"1 Running Instance.\"\n\n![](./img/ec2-dashboard.png)\n\nClick on \"1 Running Instance,\" and you'll see your server starting up.\nBelow, it's the one that says \"running.\"\n\n![](./img/start-up.png)\n\nThere's one last thing to do before we can access the server.\nWe have to setup the security to allow HTTP (web browser) access.\nIn the \"Description\" tab in the bottom half of the above image, scroll down until you see \"Security Groups.\" You'll likely have something like \"launch-wizard-1\" there.\nClick on that.\n\nOn the next screen, click the \"Inbound\" tab down where \"Description\" is listed.\nAs you can see, only the SSH option is available for accessing the instance.\nLet's change that.\n\nClick:\n\n::: {.cell}\n\n```{.r .cell-code}\nEDIT -> Add Rule -> Type set it to HTTP -> change the source from Custom to Anywhere -> Save\n```\n:::\n\nNote that this is not a secure option, but it'll get you going.\n\nFinally, to check that you're up and running, go back to your instances tab (the same image as above).\nSee the Public DNS (IPv4) box?\nCopy that, and paste it into your browser as a URL.\nIt should take you to an authentication page for RStudio Server.\nCongrats!\nYou've figured something out that took me hours.\n\nDefaults:\n\n-   Username - rstudio\n-   Password - rstudio\n\nClever, right?\n\n![](./img/rstudio-login.png)\n\nIf it worked, you should see this.\n\n![](./img/logged-in.png)\n\n## Step 3: New password for RStudio Server\n\nIt's advised that you immediately change the password.\nThere are two ways to do so.\nThe first way is easy.\nIn the `Welcome.R` file that is shown above, you'll see a description for how to `library(\"RStudioAMI\")` and then run `passwd()`.\nYou can do that, but eventually you'll have to SSH into your server for *something*, so you may as well learn how now.\n\nHave you still got the AWS Console Instances page up?\nThe one where you found the Public DNS (IPv4).\nHere it is again.\n\n![](./img/start-up.png)\n\nAWS has made it pretty easy to connect through SSH.\nClick the \"Connect\" button.\nA window should pop up with some pretty detailed instructions.\nDo you have the path to your .pem file lying around?\nYou're going to need it!\n\n![](./img/ssh.png)\n\nI run on a Mac, so I'll be using Terminal.\nIf you run on Windows, you'll need to download [PuTTY](http://www.putty.org/).\nOpen up Terminal, and type in the following for step 3:\n\n::: {.cell}\n\n```{.bash .cell-code}\nchmod 400 path_to_file/file.pem\n```\n:::\n\nNote that you actually need to locate your pem file, and pass Terminal the path.\nThis command hides the file, and is necessary to connect.\n\nNext you'll connect to your instance by typing:\n\n::: {.cell}\n\n```{.bash .cell-code}\nssh -i \"path_to_file/file.pem\" ubuntu@ec2-IPADDRESS.compute-1.amazonaws.com\n```\n:::\n\nAgain, you'll have to type in the correct path, but the IP address shown for you should be correct.\n\nWhen you connect for the first time, it might give you a prompt basically saying, \"Are you sure?\" Type yes.\nHopefully you'll see something like this:\n\n::: {.cell}\n::: {.cell-output-display}\n![](./img/ssh-login.png)\n:::\n:::\n\nTo update the password for the `rstudio` user:\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo passwd rstudio\n```\n:::\n\nThen follow the prompts.\nType `exit` to disconnect from the server, and go back to your RStudio Server site.\nTry and login with the new password.\n\n## Step 4: Update everything\n\nUnfortunately, the Amazon Images are only updated every few releases of RStudio Server.\nHowever, it's not too hard to get the newest release installed straight from RStudio's site.\n\nYou'll need to first set the CRAN mirror on your Ubuntu server so that you can actually download the latest version of R.\nThis part is a bit of a pain, requiring you to work with some text editors through Terminal, but bear with me.\n\nSign back into your Linux server through Terminal following the above instructions.\nWhen you're done, type:\n\n::: {.cell}\n\n```{.bash .cell-code}\nls\n# rstudio-server-1.0.143-amd64.deb  shiny-server-1.5.3.838-amd64.deb\n```\n:::\n\nAnd you should see a few .deb files, one for rstudio-server and one for shiny-server (mine are already upgraded).\nIf you don't, well, hopefully you can still try and follow along (Maybe `cd ~` will get you there? Maybe go back to step 1?).\n\nNow, we need to navigate to the correct file and add the CRAN mirror to it.\nThat is located at `/etc/apt/sources.list` for you pros.\nFor the rest of us, follow along.\n\nFirst navigate up two levels:\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../..\nls\n# bin   etc         initrd.img.old            lib         media  proc  sbin  sys  var\n# boot  home        jupyterhub_cookie_secret  lib64       mnt    root  snap  tmp  vmlinuz\n# dev   initrd.img  jupyterhub.sqlite         lost+found  opt    run   srv   usr  vmlinuz.old\n```\n:::\n\nThen, we need to get into etc/apt:\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd etc/apt\nls\n# apt.conf.d     sources.list    sources.list.save  trusted.gpg~\n# preferences.d  sources.list.d  trusted.gpg        trusted.gpg.d\n```\n:::\n\nI don't have a whole lot of experience with terminal editors, but I know enough to get by.\nI will use `nano`, which I believe comes on every Mac, to open up my `sources.list` file.\n`sudo` is likely needed to give admin privelages so you can save the file afterwards.\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo nano sources.list\n```\n:::\n\nA file should open, scroll all the way down to the bottom, and on a new line paste:\n\n::: {.cell}\n\n```{.bash .cell-code}\ndeb https://cloud.r-project.org/bin/linux/ubuntu/ xenial/\n```\n:::\n\nThere are a number of different versions of this command [here](https://cran.rstudio.com/bin/linux/ubuntu/README.html), but this specific one works because the Amazon Image you downloaded uses Xenial (tbh I don't really know what that means, trial and error and a bit of common sense got it to work).\n\nNow you have to escape from nano, a first-timer's nightmare.\nFollow this sequence of commands:\n\n::: {.cell}\n\n```{.bash .cell-code}\n^X # Control+X      This is used to \"Quit\"\nY  # Yes            This is used to save the file when it asks you\n# Then click Enter/Return on your keyboard to resave the file with the same name\n```\n:::\n\nNow that that is taken care of, navigate back to:\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ~\n```\n:::\n\nAnd you can update all of the linux apps, and then download the latest version of R using the two commands:\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo apt-get update\nsudo apt-get install r-base\n```\n:::\n\nFinally, you'll update to the latest version of RStudio Server.\nAt the time of writing, this is 1.0.143, but it updates regularly, so go [here](https://www.rstudio.com/products/rstudio/download-server/) and scroll down to find the latest update for 64bit Ubuntu.\nThe commands generally look like:\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo apt-get install gdebi-core\nwget https://download2.rstudio.org/rstudio-server-1.0.143-amd64.deb\nsudo gdebi rstudio-server-1.0.143-amd64.deb\n```\n:::\n\nAll done?\nGreat!\n`exit` out of your Linux server, and reload your RStudio Server in the browser.\nWhen you login, you should be able to run `version` to see the latest version of R, and go to Help -\\> About RStudio to see the updated version of RStudio Server!\n\n## Last words\n\nThis was quite the struggle.\nThere are a few other resources out there to help, but I still struggled through some pieces of this one.\nHopefully it wasn't near as bad for you!\nIn the next post, I'll show you how to update your Shiny Server and start hosting your own apps on there (with no 5 app limit like shinyapps.io)!\n\nHere are some additional resources that I found helpful when setting up my server:\n\n-   <https://deanattali.com/2015/05/09/setup-rstudio-shiny-server-digital-ocean/#user-libraries>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}