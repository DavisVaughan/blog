[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog-quarto",
    "section": "",
    "text": "May 10, 2017\n\n\nDavis Vaughan\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/2017-05-10-aws-rds-r/index.html",
    "href": "posts/2017-05-10-aws-rds-r/index.html",
    "title": "Amazon RDS + R",
    "section": "",
    "text": "Intro\nWelcome to my first post! To start things off at Data Insights, I’m going to show you how to connect to an AWS RDS instance from R.\nFor those of you who don’t know, RDS is an easy way to create a database in the cloud. In this post, I won’t be showing you how to setup an RDS instance, but I will show you how to connect to it if you have one running.\nLet’s get started.\n\n\nStep 1: The one where you got connected\nYou’ll need a few packages to get started.\n\nDBI and RMySQL are used to connect to the database, although RMySQL is usually called without explicitely loading it (that’s just the standard)\ntidyquant is just there to help us download some data to put in and get out of our database\ndplyr will be used to show off an alternate way to query from the database. Note that you should get the most recent github version of dplyr, along with the database specific pieces from dbplyr.\n\n\nlibrary(DBI)\n# library(RMySQL)\n\nlibrary(tidyquant)\n\n# devtools::install_github(\"tidyverse/dplyr\")\n# devtools::install_github(\"tidyverse/dbplyr\")\nlibrary(dplyr)\n# library(dbplyr)\n\nGetting connected isn’t too hard once you know what you’re looking for.\n\ncn <- dbConnect(drv      = RMySQL::MySQL(), \n                username = \"user1\", \n                password = \"testpassword\", \n                host     = \"davisdbinstance.crarljboc8to.us-west-2.rds.amazonaws.com\", \n                port     = 3306, \n                dbname   = \"firstdb\")\n\nLet’s go through the arguments to dbConnect(), the function from DBI that we used to connect.\n\ndrv - The driver I used is from the RMySQL package, an implementation of the general interface provided by DBI. I’ll leave it to the experts to explain all of this.\nusername / password - You’ll have to have created a user and password on AWS first, but then you can use them here.\nhost The host name is the Endpoint of your RDS server, without the port on the end. I’ve attached a screenshot to show where to find this. Basically, on the RDS Dashboard Instances page, hit the drop down arrow beside “MySQL” to show the Endpoint.\n\n\n\nport - The rest of the Endpoint shows the port that you’ll need to access your RDS instance through. That goes here.\ndbname - Finally, you’ll need the DB Name you used when setting up the instance. This can be found by clicking Instance Actions -> See Details, and then under Configuration Details you’ll find DB Name.\n\n\n\nStep 2: The one where you take it for a test spin\nWell, alright…that was…cool? How do we know it’s working? Let’s get some data to load into the database. We will use some Apple stock data retrieved through tidyquant.\n\naapl <- tq_get(\"AAPL\")\n\nslice(aapl, 1:10)\n\n\n\n\nTo write the tibble (data frame) to the database, we will use another function called dbWriteTable(). It’s pretty straightforward. “name” is the name of the table you are creating, and “value” is the data frame you want to write.\n\ndbWriteTable(cn, name = \"apple\", value = aapl)\n\nNow the fun part! Let’s use a SQL query to pull it back down with dbGetQuery(). This function is a combination of dbSendQuery(), which returns a result set for your query, and dbFetch() which returns the rows from that result set.\n\napple_from_db <- dbGetQuery(cn, \"SELECT * FROM apple;\")\n\n# This effectively is the same as\n# dbReadTable(cn, \"apple\")\n\nslice(apple_from_db, 1:10)\n\nThere are a huge number of functions from DBI that you can use to communicate with databases. Maybe I will cover more in a separate post, but for now, let’s move on to dplyr.\n\n\nStep 3: The one with the pliers\nBefore dplyr 0.6.0 was announced, you’d have to disconnect, and then reconnect through a dplyr specific function, src_mysql(). That would look something like the code below. Since then, however, you can now use the DBI connection with dplyr!\n\n# There is no need for this code anymore!\ndbDisconnect(cn)\n\ncn <- src_mysql(user     = \"user1\",\n                password = \"testpassword\",\n                host     = \"davisdbinstance.crarljboc8to.us-west-2.rds.amazonaws.com\",\n                port     = 3306,\n                dbname   = \"firstdb\")\n\nSelect the apple table from the database. This does not actually pull the data into memory. It just makes a connection!\n\n# With dplyr 0.6.0 we can just use the DBI connection!\napple_table <- tbl(cn, \"apple\")\n\n# By default the first 1000 rows are displayed\napple_table\n\nThe best part is that we can use almost any dplyr command with this! It queries the database, and does not do the manipulation in R. All of the familiar syntax of dplyr, but with databases. Let’s use filter() to get all of the rows after January 1, 2009.\n\nfilter(apple_table, date > \"2009-01-01\")\n\nTo do any serious manipulation outside of dplyr, you’ll likely have pull the data into memory to be able to use it with other R functions. Here, I’ll use the dplyr equivalent to dbWriteTable() to add the stock prices for IBM to the database.\n\nibm <- tq_get(\"IBM\")\n\ncopy_to(cn, df = ibm, temporary = FALSE)\n\nTo actually retrieve the data to memory, first make the connection using tbl() like before, and then use collect() to create the in memory tibble. Unfortunately, dates are stored as characters in the table, and collect() won’t try to fix that, so I’ll also take advantage of the readr package’s type_convert() function to do the thinking for me.\nOnce we have the data in memory, we can calculate the daily return with tidyquant and tq_mutate().\n\n# Connection\nibm_table <- tbl(cn, \"ibm\")\n\n# Collect to tibble\nreal_tibble <- collect(ibm_table) %>%\n  readr::type_convert()\n\n# Daily return\nreal_tibble <- real_tibble %>% \n  tq_mutate(select     = adjusted, \n            mutate_fun = periodReturn, \n            period     = \"daily\")\n\nreal_tibble\n\nAlways disconnect when you’re finished!\n\ndbDisconnect(cn)\n\n\n\nLast words\nHopefully I’ve been able to show you the power of DBI + dplyr with Amazon RDS. This integration has come a long way, and is just one of the huge advancements that the RStudio team has been working on in collaboration with other R users in the community.\nUntil next time!"
  }
]